# fly/frontend/nginx.conf (DNS + IP fallback, Round-Robin)

server {
    listen 8080;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # fly/frontend/nginx.conf for connection with Google backend
    location ~ ^/(api|management|v3/api-docs)/ {
        # This is the correct, stable URL for your backend
        set $backend_url https://zoranstepanoski-prof-api-yqlyfjxyeq-lm.a.run.app;

        proxy_pass $backend_url$request_uri;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Origin $http_origin;
        proxy_redirect off;
    }
#    # Fly.io API Reverse Proxy with DNS + private IP fallback
#    location ~ ^/(api|management|v3/api-docs)/ {
#        # Fly.io internal DNS
#        resolver [fdaa::3]:53 ipv6=on valid=5s;
#
#        # Backend hostname
#        set $backend_host "zoranstepanoski-prof-api.internal";
#
#        # Fallback backend private IPs (replace with your actual machine IPs)
#        set $backend_ip1 "[fdaa:2b:6918:a7b:464:6717:6324:2]";
#        set $backend_ip2 "[fdaa:2b:6918:a7b:4e5:13b9:ff5:2]";
#
#        # Standard proxy headers
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        proxy_set_header Origin $http_origin;
#
#        # Pass request to backend hostname first
#        proxy_pass http://$backend_host:8080;
#
#        # Retry on errors; fall back to private IPs if hostname fails
#        proxy_next_upstream error timeout http_502 http_503 http_504;
#        proxy_next_upstream_tries 4;
#        proxy_next_upstream_timeout 2s;
#
#        # Optional: explicit failover sequence
#        # Nginx tries $backend_host first, then IP1, then IP2
#        # This uses the built-in "next upstream" mechanism
#        # If needed, you can duplicate proxy_pass with different conditions using 'if' blocks.
#
#        # Timeouts
#        proxy_connect_timeout 3s;
#        proxy_send_timeout 10s;
#        proxy_read_timeout 10s;
#        proxy_buffering on;
#    }

    # SPA Fallback for Angular routing
    location / {
        try_files $uri $uri/ /index.html;
    }
}
